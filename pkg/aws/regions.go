package aws

import (
	"fmt"
	"math/rand"
	"strings"
)

// regionTestIPs contains all test IPs from http://ec2-reachability.amazonaws.com/
// These IPs are guaranteed to respond to ICMP ping requests
var regionTestIPs = map[string][]string{
	"af-south-1": {
		"13.245.0.253", "13.246.0.0", "13.247.0.0", "15.240.0.0", "16.28.0.0",
	},
	"af-south-1-los-1": {
		"96.0.40.228",
	},
	"ap-east-1": {
		"16.162.0.253", "18.162.80.8", "18.163.0.253", "18.166.0.253", "43.198.0.0",
		"54.46.0.0", "95.40.0.0",
	},
	"ap-east-2": {
		"43.213.3.242", "54.54.0.0",
	},
	"ap-northeast-1": {
		"103.4.10.139", "13.112.63.251", "13.158.0.0", "13.192.0.0", "13.230.0.253",
		"175.41.248.202", "176.32.95.254", "176.34.56.254", "18.176.0.0", "18.178.0.0",
		"18.179.0.8", "18.180.0.0", "18.182.0.0", "18.183.0.0", "3.112.0.0",
		"35.72.0.0", "43.206.0.0", "46.51.255.254", "52.192.63.252", "52.194.0.0",
		"52.196.63.252", "52.68.63.252", "54.150.0.255", "54.168.0.2", "54.178.0.2",
		"54.199.127.255", "54.238.0.0", "54.248.127.254", "54.250.128.0", "54.64.0.2",
		"54.92.0.2", "54.95.0.2", "57.180.0.0",
	},
	"ap-northeast-2": {
		"13.124.63.251", "13.125.0.253", "13.209.0.0", "15.164.0.0", "16.184.0.0",
		"3.34.0.0", "3.36.0.0", "43.200.0.0", "52.78.63.252", "52.79.52.64",
		"54.116.0.0", "54.180.0.0",
	},
	"ap-northeast-3": {
		"13.208.32.253", "15.152.0.254", "15.168.0.0", "16.208.0.0", "16.209.0.0",
		"56.155.0.0", "56.155.128.0",
	},
	"ap-south-1": {
		"13.126.0.252", "13.200.0.0", "13.202.0.0", "13.204.0.0", "13.232.0.253",
		"15.206.0.0", "3.108.0.0", "3.6.0.0", "35.154.63.252", "43.204.0.0",
		"52.66.66.2", "65.0.0.0",
	},
	"ap-south-2": {
		"16.112.0.0", "18.60.8.120", "40.192.0.0", "98.130.0.0",
	},
	"ap-southeast-1": {
		"122.248.255.254", "13.212.0.0", "13.214.0.0", "13.228.0.251", "13.250.0.253",
		"175.41.146.190", "18.136.0.0", "18.138.0.0", "18.140.0.0", "18.142.0.0",
		"3.0.0.9", "46.137.255.254", "46.51.216.14", "47.128.0.0", "52.221.255.252",
		"52.74.0.2", "52.76.0.2", "52.76.191.252", "52.77.63.252", "54.151.128.2",
		"54.169.0.2", "54.169.191.253", "54.179.0.2", "54.179.191.252", "54.251.63.255",
		"54.254.128.1", "54.255.0.2",
	},
	"ap-southeast-2": {
		"13.210.0.252", "13.236.0.253", "13.54.63.252", "15.134.0.0", "16.176.0.0",
		"3.104.0.0", "3.24.0.0", "43.220.0.0", "52.62.63.252", "52.64.191.252",
		"52.64.63.253", "52.65.63.252", "54.153.191.252", "54.206.127.254", "54.206.128.2",
		"54.252.88.8", "54.253.0.1", "54.66.0.2", "54.66.191.252", "54.79.127.252",
	},
	"ap-southeast-3": {
		"108.136.157.181", "16.78.0.0", "16.79.0.0", "43.218.0.0",
	},
	"ap-southeast-4": {
		"16.26.0.0", "16.50.164.255",
	},
	"ap-southeast-5": {
		"43.216.149.220", "56.68.0.0", "56.69.0.0",
	},
	"ap-southeast-6": {
		"3.102.141.118",
	},
	"ap-southeast-7": {
		"43.208.90.158", "43.210.0.10",
	},
	"ca-central-1": {
		"15.156.0.0", "15.222.0.0", "16.52.0.0", "16.54.0.0", "3.96.0.0",
		"3.98.0.0", "35.182.0.251", "52.60.50.0", "99.79.0.0",
	},
	"ca-west-1": {
		"40.176.100.29", "56.112.0.0",
	},
	"eu-central-1": {
		"18.153.7.254", "18.156.0.0", "18.184.0.0", "18.192.0.0", "18.194.0.252",
		"18.196.0.253", "18.198.0.0", "3.120.0.0", "3.124.0.0", "3.64.0.0",
		"35.156.63.252", "52.28.63.252", "52.29.63.252", "52.57.255.254", "52.58.63.252",
		"54.93.162.162", "54.93.32.2", "63.176.0.0", "63.180.0.0",
	},
	"eu-central-2": {
		"16.62.132.214", "51.34.0.0", "51.96.0.0",
	},
	"eu-north-1": {
		"13.48.0.0", "13.50.0.254", "13.51.0.0", "13.53.128.254", "13.60.0.0",
		"13.62.0.0", "16.16.0.0", "16.170.0.0", "51.20.0.0", "51.21.0.0",
		"56.228.0.0", "63.246.112.254",
	},
	"eu-south-1": {
		"15.160.0.0", "15.161.0.254", "18.102.0.0", "35.152.128.254", "51.118.0.0",
	},
	"eu-south-2": {
		"18.100.135.187", "51.48.0.0", "51.92.0.0", "51.94.0.0",
	},
	"eu-west-1": {
		"108.128.0.0", "176.34.127.254", "176.34.255.255", "18.200.0.0", "18.201.2.254",
		"18.202.0.0", "185.48.120.66", "3.248.0.0", "34.240.0.253", "34.248.60.213",
		"46.137.120.1", "46.137.191.254", "46.51.178.50", "52.16.0.2", "52.19.0.2",
		"52.215.255.254", "52.30.63.252", "52.48.63.252", "54.154.63.252", "54.155.0.1",
		"54.170.248.3", "54.171.63.252", "54.194.255.254", "54.216.0.1", "54.220.0.0",
		"54.228.250.251", "54.229.0.1", "54.246.127.255", "54.247.127.254", "54.247.192.254",
		"54.72.255.252", "54.73.0.1", "54.74.0.1", "54.76.0.3", "54.78.0.3",
		"63.32.0.0", "79.125.120.9", "99.80.0.0",
	},
	"eu-west-2": {
		"13.134.0.0", "13.40.0.0", "18.130.0.0", "18.132.0.0", "18.168.0.0",
		"18.175.28.254", "3.8.0.0", "35.176.0.252", "35.178.0.253", "51.24.0.0",
		"52.56.34.0",
	},
	"eu-west-3": {
		"13.36.0.0", "15.188.0.0", "15.236.0.0", "35.180.0.253", "35.181.0.0",
		"51.44.0.0", "51.45.0.0", "52.47.32.127",
	},
	"il-central-1": {
		"51.16.235.176", "51.84.0.0", "51.85.0.0",
	},
	"me-central-1": {
		"158.252.0.0", "3.28.180.35", "40.172.0.0", "51.112.0.0",
	},
	"me-south-1": {
		"15.184.0.253", "15.185.32.254", "157.175.10.11", "16.24.0.0",
	},
	"me-south-1-mct-1": {
		"15.220.161.219",
	},
	"sa-east-1": {
		"15.228.0.0", "177.71.255.255", "18.228.0.0", "18.229.0.0", "18.230.0.0",
		"18.231.0.252", "52.67.255.254", "54.207.127.254", "54.232.127.254", "54.233.0.0",
		"54.233.127.252", "54.233.192.0", "54.94.0.66", "54.94.191.252", "56.124.0.0",
		"56.125.0.0", "56.126.0.0", "56.127.0.0",
	},
	"us-east-1": {
		"100.24.0.0", "107.22.255.255", "13.216.0.0", "174.129.0.31", "18.204.0.0",
		"18.208.0.0", "18.232.0.0", "184.72.255.254", "184.72.92.4", "184.73.173.231",
		"204.236.238.4", "23.23.255.255", "3.208.0.0", "3.224.0.0", "3.80.0.0",
		"34.192.0.54", "34.224.0.252", "35.153.128.254", "35.168.0.253", "44.192.0.0",
		"50.17.255.254", "50.19.255.254", "52.1.255.254", "52.2.0.2", "52.20.63.253",
		"52.200.255.254", "52.45.127.254", "52.54.63.252", "52.7.255.255", "52.70.63.252",
		"52.72.63.252", "52.86.63.252", "52.90.63.252", "54.144.0.2", "54.152.63.252",
		"54.156.0.0", "54.160.0.2", "54.164.63.252", "54.166.0.2", "54.172.63.252",
		"54.174.0.2", "54.196.0.1", "54.198.0.1", "54.205.255.255", "54.208.0.1",
		"54.210.63.252", "54.221.214.221", "54.225.110.215", "54.226.0.1", "54.235.236.60",
		"54.236.0.0", "54.243.255.254", "54.80.0.2", "54.84.0.3", "54.86.63.252",
		"54.88.0.3", "54.89.0.3", "54.90.0.3", "54.92.128.2", "67.202.0.5",
		"72.44.32.8", "75.101.163.105", "98.80.0.0", "98.88.0.0",
	},
	"us-east-2": {
		"13.58.0.253", "18.116.0.0", "18.188.0.0", "18.189.0.0", "18.190.0.0",
		"18.191.0.0", "18.216.0.253", "18.220.0.252", "18.224.0.0", "3.12.0.0",
		"3.128.0.0", "3.13.0.254", "3.130.0.254", "3.131.0.0", "3.132.0.0",
		"3.136.0.0", "3.14.0.0", "3.144.0.0", "3.16.0.0", "3.20.0.0",
		"52.14.64.0", "52.15.55.0",
	},
	"us-gov-east-1": {
		"16.64.0.0", "18.252.0.253", "18.253.46.71", "18.254.0.254",
	},
	"us-gov-west-1": {
		"15.200.0.254", "15.205.0.254", "160.1.0.254", "3.30.0.254", "3.32.0.253",
		"52.222.9.163", "52.61.0.254", "56.136.0.0", "56.137.0.0", "96.127.100.10",
	},
	"us-west-1": {
		"13.52.0.0", "13.56.63.251", "13.57.0.253", "18.144.0.254", "184.169.255.254",
		"184.72.56.36", "204.236.129.206", "50.18.56.1", "52.52.63.252", "52.8.191.254",
		"52.9.63.252", "54.151.0.2", "54.153.63.252", "54.176.64.1", "54.183.64.3",
		"54.193.0.3", "54.215.0.1", "54.219.127.255", "54.241.127.255", "54.67.128.0",
		"54.67.63.253",
	},
	"us-west-2": {
		"100.20.0.0", "16.144.0.0", "16.145.0.0", "18.236.0.0", "18.246.28.254",
		"34.208.63.251", "35.155.0.0", "35.160.63.253", "35.95.2.254", "44.224.0.0",
		"50.112.120.53", "52.10.63.252", "52.12.128.0", "52.24.63.252", "52.32.63.252",
		"52.36.0.2", "52.43.255.254", "52.88.0.2", "54.148.0.2", "54.184.0.3",
		"54.186.0.3", "54.188.0.0", "54.190.0.0", "54.191.63.252", "54.200.0.1",
		"54.202.0.1", "54.212.0.0", "54.214.0.1", "54.218.4.254", "54.244.128.1",
		"54.245.127.255", "54.68.63.252", "54.70.0.12",
	},
	"us-west-2-lax-1": {
		"15.253.0.254", "15.253.128.254", "15.254.0.254", "70.224.224.253",
	},
}

// GetRegionIP returns a random test IP from the specified AWS region
func GetRegionIP(region string) (string, error) {
	// Parse region from format like "aws_us-west-2"
	if strings.HasPrefix(region, "aws_") {
		region = strings.TrimPrefix(region, "aws_")
	}

	ips, exists := regionTestIPs[region]
	if !exists || len(ips) == 0 {
		return "", fmt.Errorf("no test IPs found for region: %s (available regions: %d)", region, len(regionTestIPs))
	}

	// Select a random IP from the list
	randomIP := ips[rand.Intn(len(ips))]

	return randomIP, nil
}

// IsAWSRegion checks if the target is an AWS region identifier
func IsAWSRegion(target string) bool {
	return strings.HasPrefix(target, "aws_")
}

// ListAWSRegions returns a list of available AWS regions
func ListAWSRegions() []string {
	regions := make([]string, 0, len(regionTestIPs))
	for region := range regionTestIPs {
		regions = append(regions, region)
	}
	return regions
}
